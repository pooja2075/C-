#include <iostream>
#include <vector>
#include <list>
#include <queue>

using namespace std;

class Graph {
    int vertices;
    vector<list<int>> adjList;

public:
    Graph(int vertices) {
        this->vertices = vertices;
        adjList.resize(vertices);
    }

    void addEdge(int a, int b) {
        adjList[a].push_back(b);
        adjList[b].push_back(a);
    }

    void bfs(int start) {
        vector<bool> visited(vertices, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "We are starting BFS from vertex " << start << endl;
        while (!q.empty()) {
            int vertex = q.front();
            q.pop();
            cout << vertex << " ";

            for (int a : adjList[vertex]) {
                if (!visited[a]) {
                    visited[a] = true;
                    q.push(a);
                }
            }
        }
        cout << endl;
    }
};

int main() {
    Graph g(6);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 5);

    g.bfs(0);

    return 0;
}
