#include <iostream>
using namespace std;

class LList {
    struct Node {
        int data;
        Node* next;
        
        Node(int val) : data(val), next(nullptr) {}
    };
    
    Node* head;

public:
    LList() : head(nullptr) {}

    // Insert at the beginning
    void insert(int val) {
        Node* newnode = new Node(val);
        if (head == nullptr) {
            head = newnode;
        } else {
            newnode->next = head;
            head = newnode;
        }
    }

    // Display the list
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << "-->";
            temp = temp->next;
        }
        cout << "null" << endl;
    }

    // Insert at a specific position
    void insert_pos(int val, int pos) {
        if (pos == 0) {
            insert(val);
        } else {
            Node* newnode = new Node(val);
            Node* temp = head;

            for (int i = 1; i < pos; i++) {
                if (temp == nullptr || temp->next == nullptr) {
                    cout << "Out of bound" << endl;
                    return;
                }
                temp = temp->next;
            }

            newnode->next = temp->next;
            temp->next = newnode;
        }
    }

    // Delete a node at a specific position
    void delete_pos(int pos) {
        if (head == nullptr) return;

        Node* temp = head;
        if (pos == 0) {
            head = head->next;
            delete temp;
            return;
        }

        for (int i = 1; i < pos; i++) {
            if (temp->next == nullptr) return;
            temp = temp->next;
        }

        if (temp->next == nullptr) return;

        Node* nodeToDelete = temp->next;
        temp->next = temp->next->next;
        delete nodeToDelete;
    }
};

int main() {
    LList l;
    
    l.insert(100);
    l.insert(200);
    l.insert(300);
    l.insert(400);
    l.insert_pos(175, 2);
    l.display();
    l.delete_pos(1);
    l.display();
    
    return 0;
}
